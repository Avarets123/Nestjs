version: '3'

services:

  backend:
    container_name: project-backend
    build: ./backend
    command: npm run start
    restart: unless-stopped
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
    networks:
      - single-network
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - PORT=${BACKEND_PORT}
    depends_on:
      - db_postgres

  frontend:
    container_name: project-frontend
    build: ./frontend
    ports:
      - ${FRONTEND_PORT}:${FRONTEND_PORT}
    command: serve -s build -l ${FRONTEND_PORT}
    restart: unless-stopped
    networks:
      - single-network
    depends_on:
      - backend

  # nginx:
  #   image: nginx:stable-alpine
  #   container_name: project-nginx
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf
  #   depends_on:
  #     - frontend
  #     - backend
  #     - db_postgres
  #   networks:
  #     - single-network

  db_postgres:
    container_name: project-database
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    image: postgres:14.3-alpine
    networks:
      - single-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
networks:
  single-network:
    driver: bridge

volumes:
  postgres_data:
